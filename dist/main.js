/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("class WeatherDetails {\r\n    constructor(\r\n        location,\r\n        temperature,\r\n        feelsLike,\r\n        condition,\r\n        description,\r\n        windSpeed\r\n    ) {\r\n        this.location = location;\r\n        this.temperature = temperature;\r\n        this.feelsLike = feelsLike;\r\n        this.condition = condition;\r\n        this.description = description;\r\n        this.windSpeed = windSpeed;\r\n    }\r\n}\r\n\r\nconst apiHandler = (() => {\r\n    let apiKey = \"64f4fcc93c0bc1f768c0f50576f0239a\";\r\n    async function getWeatherObject(city) {\r\n        try {\r\n            const data = await fetch(\r\n                `http://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${apiKey}`,\r\n                { mode: \"cors\" }\r\n            );\r\n            const response = await data.json();\r\n            const weather = new WeatherDetails(\r\n                response.name,\r\n                response.main.temp,\r\n                response.main.feels_like,\r\n                response.weather[0].main,\r\n                response.weather[0].description,\r\n                response.wind.speed\r\n            );\r\n            getWeatherForecast(city);\r\n            return weather;\r\n        } catch (error) {\r\n            console.log(error);\r\n            alert(\"City not found\");\r\n        }\r\n    }\r\n    async function getWeatherForecast(city) {\r\n        try {\r\n            const forecastData = await fetch(\r\n                `http://api.openweathermap.org/data/2.5/forecast?q=${city}&cnt=7&APPID=${apiKey}`,\r\n                { mode: \"cors\" }\r\n            );\r\n            const forecast = await forecastData.json();\r\n            return forecast;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    return {\r\n        getWeatherObject,\r\n        getWeatherForecast,\r\n    };\r\n})();\r\n\r\nconst displayHandler = (() => {\r\n    function fillCurrentWeatherCard(weatherDetails) {\r\n        if (weatherDetails !== undefined) {\r\n            const iconImg = document.querySelector(\".current-weather-icon\");\r\n            document.querySelector(\".current-weather-location\").textContent =\r\n                weatherDetails.location;\r\n            let temp = convertTemp(weatherDetails.temperature);\r\n            document.querySelector(\".current-weather-temp\").textContent = temp;\r\n            document.querySelector(\".current-weather-feels-like\").textContent =\r\n                weatherDetails.feelsLike;\r\n            document.querySelector(\".current-weather-description\").textContent =\r\n                weatherDetails.description;\r\n            document.querySelector(\".current-weather-wind-speed\").textContent =\r\n                weatherDetails.windSpeed + \" mph\";\r\n            console.log(weatherDetails);\r\n            const condition = weatherDetails.condition;\r\n            switch (condition.toLowerCase()) {\r\n                case \"thunderstorm\":\r\n                    iconImg.src = \"../dist/img/thunderstorm-icon.svg\";\r\n                    break;\r\n                case \"drizzle\":\r\n                    iconImg.src = \"../dist/img/drizzle-icon.svg\";\r\n                    break;\r\n                case \"rain\":\r\n                    iconImg.src = \"../dist/img/rain-icon.svg\";\r\n                    break;\r\n                case \"snow\":\r\n                    iconImg.src = \"../dist/img/snow-icon.svg\";\r\n                    break;\r\n                case \"clouds\":\r\n                    iconImg.src = \"../dist/img/cloud-icon.svg\"\r\n                    break;\r\n                case \"clear\":\r\n                    iconImg.src = \"../dist/img/sun-icon.svg\";\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    function fillForecast(forecastList) {\r\n        for (let i = 0; i < forecastList.length; i++) {\r\n            const forecastCard = document.createElement(\"div\");\r\n            forecastCard.classList.add(\"card\");\r\n            const forecastDate = document.createElement(\"p\");\r\n            const forecastTemp = document.createElement(\"p\");\r\n            const forecastDescription = document.createElement(\"p\");\r\n\r\n            forecastDate.textContent = forecastList[i].dt_txt;\r\n            forecastTemp.textContent = forecastList[i].main.temp;\r\n            forecastDescription.textContent =\r\n                forecastList[i].weather[0].description;\r\n\r\n            forecastCard.append(\r\n                forecastDate,\r\n                forecastTemp,\r\n                forecastDescription\r\n            );\r\n            document\r\n                .querySelector(\".forecast-container\")\r\n                .appendChild(forecastCard);\r\n        }\r\n    }\r\n    function convertTemp(temp) {\r\n        // let newTemp = 1.8 * (temp - 273) + 32;\r\n        let newTemp = temp - 273.15;\r\n        return Math.round(newTemp);\r\n    }\r\n    function searchWeather() {\r\n        const searchValue = document.getElementById(\r\n            \"location-search-bar\"\r\n        ).value;\r\n        apiHandler.getWeatherObject(searchValue).then((response) => {\r\n            fillCurrentWeatherCard(response);\r\n        });\r\n        apiHandler.getWeatherForecast(searchValue).then((response) => {\r\n            console.log(response.list);\r\n        });\r\n    }\r\n    apiHandler.getWeatherObject(\"sacramento\").then((response) => {\r\n        fillCurrentWeatherCard(response);\r\n    });\r\n    apiHandler.getWeatherForecast(\"sacramento\").then((response) => {\r\n        console.log(response);\r\n        fillForecast(response.list);\r\n    });\r\n    document\r\n        .querySelector(\".location-search-btn\")\r\n        .addEventListener(\"click\", function () {\r\n            searchWeather();\r\n        });\r\n    document\r\n        .getElementById(\"location-search-bar\")\r\n        .addEventListener(\"keydown\", function (e) {\r\n            if (e.keyCode === 13) {\r\n                searchWeather();\r\n            }\r\n        });\r\n\r\n    return {\r\n        fillCurrentWeatherCard,\r\n    };\r\n})();\r\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;